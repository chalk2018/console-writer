Object.defineProperty(exports,"__esModule",{value:!0}),exports.auto=exports.ConsoleBuilder=exports.Level=void 0;const path=require("path"),consoleProperty={log:!0,info:!0,error:!0,exception:!0,warn:!0,debug:!0,assert:!1,clear:!1,context:!1,count:!1,countReset:!1,dir:!1,dirxml:!1,group:!1,groupCollapsed:!1,groupEnd:!1,memory:!1,profile:!1,profileEnd:!1,table:!1,time:!1,timeEnd:!1,timeLog:!1,timeStamp:!1,trace:!1};var Level;!function(e){e.all="all",e.debug="debug",e.info="info",e.warn="warn",e.error="error",e.off="off"}(Level=exports.Level||(exports.Level={}));const defaultOption={backup:!0,fileName:"console.log",logDir:"logs",backupSize:10485760,backupCount:3,backupZip:!0,level:Level.all,disabledConsole:!1,autoRewrite:!1,useConfig:!1,autoInitOption:!1,configFileName:"cw.config.js"};class ConsoleBuilder extends Map{constructor(e){super(),globalThis.__console=globalThis.console,this.set("log4js",require("log4js"));var t=path.resolve();this.set("basePath",t),this.set("option",e),(e?.useConfig??defaultOption.useConfig)&&this.configResolver(e?.configFileName||defaultOption.configFileName),(e?.autoInitOption??this.option?.autoInitOption??defaultOption.autoInitOption)&&this.initOption(this.option),(e?.autoRewrite??this.option?.autoRewrite??defaultOption.autoRewrite)&&this.rewriteConsole()}get base(){return this.get("basePath")}get option(){return this.get("option")}get logger(){return this.get("logger")}get console(){return globalThis.__console}get log4js(){return this.get("log4js")}get log(){return console.log}get info(){return console.info}get warn(){return console.warn}get error(){return console.error}get debug(){return console.debug}onLog(e){this.set("on_log",e)}onInfo(e){this.set("on_info",e)}onError(e){this.set("on_error",e)}onWarn(e){this.set("on_warn",e)}onDebug(e){this.set("on_debug",e)}hookingStart(e){const t=this.get("on_"+e);if(t)return t(this.console,this.logger)}hookingEnd(e,t){!this.get("on_"+e)||"[object Function]"!==Object.prototype.toString.call(t[e])&&"[object AsyncFunction]"!==Object.prototype.toString.call(t[e])||t[e](this.console,this.logger)}configResolver(e){try{var t=require(path.join(this.base,e??defaultOption.configFileName)),o={...this.option,...t.option};this.set("option",o)}catch(e){this.console.error(e)}}shutdown(){return new Promise((e,t)=>{this.log4js.shutdown(()=>{e(this.log4js)})})}async closeLog4js(){try{return await this.shutdown(),this.log4js}catch(e){throw e}}initOption(t){const{configure:o,getLogger:i}=this.log4js;if(globalThis.console=this.console,void 0===t?t=this.option:this.set("option",t),t?.configLog4js)t.configLog4js(this.log4js,e=>{this.set("logger",e)},this.rewriteConsole.bind(this));else if(t?.backup){let e=".log";const n=t.fileName||defaultOption.fileName,l=n.split(".");1<l.length&&(e="."+l.pop());var r=l.join("."),r=(o({appenders:{loggerStore:{type:"multiFile",base:(t?.logDir??defaultOption.logDir)+"/",property:"categoryName",extension:e,maxLogSize:t?.backupSize??defaultOption.backupSize,backups:t?.backupCount??defaultOption.backupCount,compress:t?.backupZip??defaultOption.backupZip}},categories:{default:{appenders:["loggerStore"],level:t?.level||defaultOption.level}}}),i(r));this.set("logger",r)}else{o({appenders:{loggerStore:{type:"file",filename:path.join(t?.logDir||defaultOption.logDir,t?.fileName||defaultOption.fileName)}},categories:{default:{appenders:["loggerStore"],level:t?.level||defaultOption.level}}});r=i();this.set("logger",r)}return this}output(e,t){var o=this;"log"===e||"info"===e?o.logger.info(...t):"error"===e||"exception"===e?o.logger.error(...t):"warn"===e?o.logger.warn(...t):"debug"===e&&o.logger.debug(...t)}logWriter(o,e){const i=this;return function(...r){if(0!==r.length){const t=r[0];if("string"==typeof t&&["%o","%O","%d","%i","%s","%f"].some(e=>0<=t.indexOf(e))){let i=1;t.replaceAll(/(%o)|(%O)|(%d)|(%i)|(%s)|(%f)/g,(e,t)=>{var o=r[i];return i++,o})}else{var e=r.map(e=>{if("[object Number]"===Object.prototype.toString.call(e))return String(e);if("[object Boolean]"===Object.prototype.toString.call(e))return String(e);if("[object String]"===Object.prototype.toString.call(e))return e;if("[object Undefined]"===Object.prototype.toString.call(e))return String(e);if("[object Null]"===Object.prototype.toString.call(e))return String(e);if("[object Object]"===Object.prototype.toString.call(e))try{return JSON.stringify(e)}catch(e){return""}else{if("[object Array]"!==Object.prototype.toString.call(e))return String(e);try{return JSON.stringify(e)}catch(e){return""}}});i.output(o,e)}}}.bind(e||(this??null))}rewriteConsole(){const n=this;return(this.option?.autoRewrite??defaultOption.autoRewrite)||this.initOption(),this.get("console")?globalThis.console=this.get("console"):(globalThis.console=new Proxy(this.console,{get(i,r,e){return consoleProperty[r]?(...e)=>{var t=n.hookingStart(r);n.logWriter(r,i)(...e);let o=void 0;return o=n.option?.disabledConsole?void 0:i[r].call(i,...e),n.hookingEnd(r,{[r]:t}),o}:Reflect.get(i,r,e)}}),this.set("console",globalThis.console)),n}}exports.ConsoleBuilder=ConsoleBuilder;const auto=()=>{const e=new ConsoleBuilder({useConfig:!0,autoInitOption:!1,autoRewrite:!1});return e.initOption().rewriteConsole(),e};exports.auto=auto;
